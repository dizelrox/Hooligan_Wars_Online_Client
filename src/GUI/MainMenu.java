package GUI;
import Logic.GameInitialize;
import Sound.BackGroundMusicThread;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
/**
 * This class describes the main menu.
 * With this object you can choose to start a new game or exit.
 * If you choose to start a new game object of {@link GUI.CharacterFrame}.
 * @author Dima Ryskin
 * @author Bogdan Kirylyuk
 * 
 */
public class MainMenu extends javax.swing.JFrame
{
    /**
      * Holds object of {@link GUI.CharacterFrame}.
      */
    CharacterFrame characterFrame;
    public static BackGroundMusicThread b;
    /**
     * <h2>This is the default constructor of this class.</h2>Initializes all 
     * the components of the current window. Receives a boolean parameter to
     * determine whether the background sound player thread should be invoked 
     * to eliminate any chance of sound overlaying.
     */
    public MainMenu(boolean playMusic)
    {
        initComponents();
        this.getContentPane().setBackground(Color.DARK_GRAY);
        
        if (playMusic)
        {   
        b = new BackGroundMusicThread("src/Sound/tracks/background.wav");
        Thread backgroundMusic = new Thread(b, "bgSound");
        backgroundMusic.start();
        }
        
        this.setVisible(true);
    }
    
    
    


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainExitButton = new javax.swing.JButton();
        login = new javax.swing.JButton();
        newPlayer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(GameInitialize.gameVersion);
        setBackground(null);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("fistIcon.png")).getImage()
        );
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowActivated(java.awt.event.WindowEvent evt)
            {
                formWindowActivated(evt);
            }
        });

        mainExitButton.setBackground(java.awt.Color.lightGray);
        mainExitButton.setFont(new java.awt.Font("Trajan Pro", 1, 24)); // NOI18N
        mainExitButton.setText("Exit");
        mainExitButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                mainExitButtonMouseClicked(evt);
            }
        });

        login.setBackground(java.awt.Color.lightGray);
        login.setFont(new java.awt.Font("Trajan Pro", 1, 24)); // NOI18N
        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loginActionPerformed(evt);
            }
        });

        newPlayer.setBackground(java.awt.Color.lightGray);
        newPlayer.setFont(new java.awt.Font("Trajan Pro", 1, 24)); // NOI18N
        newPlayer.setText("New player");
        newPlayer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newPlayerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(login, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(mainExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(newPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(newPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mainExitButton)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method called when the window is created.
     * Its purpose is to make the window centralized by calling a method specified for that.
     * @param evt
     */
    private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
    {//GEN-HEADEREND:event_formWindowActivated
        setLocationToMiddle();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated
/**
 * This method is called when the new game button is pressed.
 * it creates new instance of {@link GUI.CharacterFrame} and makes
 * current window invisible but not closing it.
 * @param evt
 */

    private void newPlayerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newPlayerActionPerformed
    {//GEN-HEADEREND:event_newPlayerActionPerformed
        NewPlayerDialog playerDialog = new NewPlayerDialog(this, true);
        playerDialog.setVisible(true);
//        this.setVisible(false);
        
    }//GEN-LAST:event_newPlayerActionPerformed
/**
 * This method is called when the exit button is pressed.
 * It closes the current window.
 * @param evt
 */
    private void mainExitButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainExitButtonMouseClicked
    {//GEN-HEADEREND:event_mainExitButtonMouseClicked
        this.setVisible(false);
        System.exit(0);// TODO add your handling code here:
    }//GEN-LAST:event_mainExitButtonMouseClicked

    private void loginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loginActionPerformed
    {//GEN-HEADEREND:event_loginActionPerformed
        LoginDialog d = new LoginDialog(this,true);
    }//GEN-LAST:event_loginActionPerformed
/**
 * This method is called on window creation.Its purpose to put this window at the middle of the screen.
 */
    private void setLocationToMiddle()
    {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int windowWidth = this.getSize().width;
        int windowHeight = this.getSize().height;
        int positionX = (screenSize.width-windowWidth)/2;
        int positionY = (screenSize.height-windowHeight)/2;

        // Move the window
        this.setLocation(positionX, positionY);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton login;
    private javax.swing.JButton mainExitButton;
    private javax.swing.JButton newPlayer;
    // End of variables declaration//GEN-END:variables
}
